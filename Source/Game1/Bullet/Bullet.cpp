/////////////////////////////////////////////////////
// Name : Bullet
//
// Author : 山田 聖弥
//
// Day : 2017/7/14
/////////////////////////////////////////////////////
#include "Bullet.h"
#include "../../GameBase/Sprite/Sprite.h"

using namespace Math;

/////////////////////////////////////////////////////
// Name : Bullet
//
// Over View : コンストラクタ
//
// Argument : 無し
/////////////////////////////////////////////////////
Bullet::Bullet()
	:vel_(Vector2::Zero), moveSpeed_(15.0f)
	,power_(0),hit_(false)
{
	RECT rect{ 0,0,32,32 };
	sprite_.reset(new Sprite(L"Resources\\Images\\Ball.png",rect));
	sprite_->Origine(Vector2(rect.bottom / 2.0f, rect.right / 2.0f));
}

/////////////////////////////////////////////////////
// Name : ~デストラクタ
//
// Over View : デストラクタ
//
// Argument : ~Bullet
/////////////////////////////////////////////////////
Bullet::~Bullet()
{
}

/////////////////////////////////////////////////////
// Name : Initialize
//
// Over View : 初期化処理
//
// Argument : 画像のパス
//
// Return : 無し
/////////////////////////////////////////////////////
void Bullet::Initialize(Vector2 pos,Vector2 vel,int power)
{
	sprite_->Pos(pos);
	vel_ = vel;
	vel_.Normalize();
	power_ = power;
}

/////////////////////////////////////////////////////
// Name : Update
//
// Over View : 更新処理
//
// Argument : 無し
//
// Return : 無し
/////////////////////////////////////////////////////
bool Bullet::Update()
{
	//何かにあたっていたらfalse
	if (hit_)
		return false;

	sprite_->Pos(sprite_->Pos() + vel_ * moveSpeed_);

	return true;
}

/////////////////////////////////////////////////////
// Name : Render
//
// Over View : 描画処理
//
// Argument : 無し
//
// Return : 無し
/////////////////////////////////////////////////////
void Bullet::Render()
{
	sprite_->Render();
}

/////////////////////////////////////////////////////
// Name : Scale
//
// Over View : 大きさの変更
//
// Argument : 大きさ
//
// Return : 無し
/////////////////////////////////////////////////////
void Bullet::Scale(float scale)
{
	sprite_->Scale(scale);
}

/////////////////////////////////////////////////////
// Name : Scale
//
// Over View : 大きさの取得
//
// Argument : 無し
//
// Return : 大きさ
/////////////////////////////////////////////////////
float Bullet::Scale()
{
	return sprite_->Scale();
}

/////////////////////////////////////////////////////
// Name : BoundingBox
//
// Over View : 当たり判定用のボックスの取得
//
// Argument : 無し
//
// Return : 当たり判定用のボックス
/////////////////////////////////////////////////////
Collider::BoundingBox Bullet::BoundingBox()
{
	return sprite_->BoundingBox();;
}

/////////////////////////////////////////////////////
// Name : Power
//
// Over View : 攻撃力の取得
//
// Argument : 無し
//
// Return : 攻撃力
/////////////////////////////////////////////////////
int Bullet::Power()
{
	return power_;
}

/////////////////////////////////////////////////////
// Name : Hit
//
// Over View : 何かにあたった時の処理
//
// Argument : 無し
//
// Return : 無し
/////////////////////////////////////////////////////
void Bullet::Hit()
{
	hit_ = true;
}
